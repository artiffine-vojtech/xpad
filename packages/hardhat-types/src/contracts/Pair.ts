/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface PairInterface extends utils.Interface {
  functions: {
    "MINIMUM_LIQUIDITY()": FunctionFragment;
    "approval(address,address,uint256)": FunctionFragment;
    "balance()": FunctionFragment;
    "burn(uint256,uint256,address)": FunctionFragment;
    "factory()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "kLast()": FunctionFragment;
    "liquidityProvider()": FunctionFragment;
    "mint(uint256,uint256,address)": FunctionFragment;
    "priceALast()": FunctionFragment;
    "priceBLast()": FunctionFragment;
    "swap(uint256,uint256,uint256,uint256)": FunctionFragment;
    "tokenA()": FunctionFragment;
    "tokenB()": FunctionFragment;
    "transferETH(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MINIMUM_LIQUIDITY"
      | "approval"
      | "balance"
      | "burn"
      | "factory"
      | "getReserves"
      | "kLast"
      | "liquidityProvider"
      | "mint"
      | "priceALast"
      | "priceBLast"
      | "swap"
      | "tokenA"
      | "tokenB"
      | "transferETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MINIMUM_LIQUIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approval",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kLast", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceALast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceBLast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "tokenA", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferETH",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MINIMUM_LIQUIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kLast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceALast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceBLast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferETH",
    data: BytesLike
  ): Result;

  events: {
    "Burn(uint256,uint256,address)": EventFragment;
    "Mint(uint256,uint256,address)": EventFragment;
    "Swap(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface BurnEventObject {
  reserve0: BigNumber;
  reserve1: BigNumber;
  lp: string;
}
export type BurnEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  BurnEventObject
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface MintEventObject {
  reserve0: BigNumber;
  reserve1: BigNumber;
  lp: string;
}
export type MintEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface SwapEventObject {
  amount0In: BigNumber;
  amount0Out: BigNumber;
  amount1In: BigNumber;
  amount1Out: BigNumber;
}
export type SwapEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface Pair extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PairInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<[BigNumber]>;

    approval(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    kLast(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityProvider(overrides?: CallOverrides): Promise<[string]>;

    mint(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    priceALast(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceBLast(overrides?: CallOverrides): Promise<[BigNumber]>;

    swap(
      amount0In: PromiseOrValue<BigNumberish>,
      amount0Out: PromiseOrValue<BigNumberish>,
      amount1In: PromiseOrValue<BigNumberish>,
      amount1Out: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenA(overrides?: CallOverrides): Promise<[string]>;

    tokenB(overrides?: CallOverrides): Promise<[string]>;

    transferETH(
      _address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

  approval(
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    reserve0: PromiseOrValue<BigNumberish>,
    reserve1: PromiseOrValue<BigNumberish>,
    _lp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getReserves(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  kLast(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityProvider(overrides?: CallOverrides): Promise<string>;

  mint(
    reserve0: PromiseOrValue<BigNumberish>,
    reserve1: PromiseOrValue<BigNumberish>,
    _lp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  priceALast(overrides?: CallOverrides): Promise<BigNumber>;

  priceBLast(overrides?: CallOverrides): Promise<BigNumber>;

  swap(
    amount0In: PromiseOrValue<BigNumberish>,
    amount0Out: PromiseOrValue<BigNumberish>,
    amount1In: PromiseOrValue<BigNumberish>,
    amount1Out: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenA(overrides?: CallOverrides): Promise<string>;

  tokenB(overrides?: CallOverrides): Promise<string>;

  transferETH(
    _address: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    approval(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    kLast(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityProvider(overrides?: CallOverrides): Promise<string>;

    mint(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    priceALast(overrides?: CallOverrides): Promise<BigNumber>;

    priceBLast(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      amount0In: PromiseOrValue<BigNumberish>,
      amount0Out: PromiseOrValue<BigNumberish>,
      amount1In: PromiseOrValue<BigNumberish>,
      amount1Out: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenA(overrides?: CallOverrides): Promise<string>;

    tokenB(overrides?: CallOverrides): Promise<string>;

    transferETH(
      _address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Burn(uint256,uint256,address)"(
      reserve0?: null,
      reserve1?: null,
      lp?: null
    ): BurnEventFilter;
    Burn(reserve0?: null, reserve1?: null, lp?: null): BurnEventFilter;

    "Mint(uint256,uint256,address)"(
      reserve0?: null,
      reserve1?: null,
      lp?: null
    ): MintEventFilter;
    Mint(reserve0?: null, reserve1?: null, lp?: null): MintEventFilter;

    "Swap(uint256,uint256,uint256,uint256)"(
      amount0In?: null,
      amount0Out?: null,
      amount1In?: null,
      amount1Out?: null
    ): SwapEventFilter;
    Swap(
      amount0In?: null,
      amount0Out?: null,
      amount1In?: null,
      amount1Out?: null
    ): SwapEventFilter;
  };

  estimateGas: {
    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    approval(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    kLast(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityProvider(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    priceALast(overrides?: CallOverrides): Promise<BigNumber>;

    priceBLast(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      amount0In: PromiseOrValue<BigNumberish>,
      amount0Out: PromiseOrValue<BigNumberish>,
      amount1In: PromiseOrValue<BigNumberish>,
      amount1Out: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenA(overrides?: CallOverrides): Promise<BigNumber>;

    tokenB(overrides?: CallOverrides): Promise<BigNumber>;

    transferETH(
      _address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approval(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kLast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    priceALast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceBLast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      amount0In: PromiseOrValue<BigNumberish>,
      amount0Out: PromiseOrValue<BigNumberish>,
      amount1In: PromiseOrValue<BigNumberish>,
      amount1Out: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferETH(
      _address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
