/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { ERC20, ERC20Interface } from "../../../contracts/ERC20.sol/ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxTx",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_maxTx",
        type: "uint256",
      },
    ],
    name: "MaxTxUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "excludeFromMaxTx",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "maxTx",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_maxTx",
        type: "uint256",
      },
    ],
    name: "updateMaxTx",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x604060808152346200041d5762001095803803806200001e8162000422565b9283398101906080818303126200041d5780516001600160401b0391908281116200041d5783620000519183016200045e565b9060209384820151908482116200041d576200006f9183016200045e565b606086830151920151906000943360018060a01b031987541617865533867f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a384518181116200033757600254906001968783811c9316801562000412575b8a84101462000318578190601f93848111620003be575b508a9084831160011462000357578a926200034b575b5050600019600383901b1c191690871b176002555b8251918211620003375760039283548781811c911680156200032c575b8a821014620003185790818385949311620002c3575b50899183116001146200026057889262000254575b505060001982841b1c191690851b1790555b670de0b6b3a764000091828102928184041490151715620002405781835560058111620001fe57907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929160045533845260058552858420556007845284832060ff199082828254161790553084528186852091825416179055549284519384523393a351610bc49081620004d18239f35b60648587519062461bcd60e51b825280600483015260248201527f4d6178205472616e73616374696f6e2063616e6e6f74206578636565642035256044820152fd5b634e487b7160e01b84526011600452602484fd5b0151905038806200015a565b8489528989208894509190601f1984168a5b8c828210620002ac575050841162000293575b505050811b0190556200016c565b015160001983861b60f8161c1916905538808062000285565b8385015186558b9790950194938401930162000272565b909192508489528989208380860160051c8201928c87106200030e575b9186958b929594930160051c01915b828110620002ff57505062000145565b8b81558695508a9101620002ef565b92508192620002e0565b634e487b7160e01b89526022600452602489fd5b90607f16906200012f565b634e487b7160e01b87526041600452602487fd5b015190503880620000fd565b60028b528b8b208a94509190601f1984168c8e5b828210620003a657505084116200038c575b505050811b0160025562000112565b015160001960f88460031b161c191690553880806200037d565b8385015186558d979095019493840193018e6200036b565b90915060028a528a8a208480850160051c8201928d861062000408575b918b91869594930160051c01915b828110620003f9575050620000e7565b8c81558594508b9101620003e9565b92508192620003db565b92607f1692620000d0565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200044857604052565b634e487b7160e01b600052604160045260246000fd5b919080601f840112156200041d5782516001600160401b038111620004485760209062000494601f8201601f1916830162000422565b928184528282870101116200041d5760005b818110620004bc57508260009394955001015290565b8581018301518482018401528201620004a656fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146105ab57508163095ea7b31461058157816318160ddd1461056257816323b872dd1461048d578163313ce5671461047157816370a0823114610439578163715018a6146103da5781637437681e146103bc5781638da5cb5b1461039457816395d89b411461028f578163a9059cbb1461025e578163c2d0ffca146101b9578163db4cf1e01461010a575063dd62ed3e146100bf57600080fd5b34610106578060031936011261010657806020926100db6106b3565b6100e36106ce565b6001600160a01b0391821683526006865283832091168252845220549051908152f35b5080fd5b9050346101b55760203660031901126101b5576101256106b3565b83546001600160a01b03919061013e908316331461071c565b1690811561015e5750825260076020528120805460ff1916600117905580f35b608490602084519162461bcd60e51b8352820152602b60248201527f45524332303a204578636c756465204d61782054782066726f6d20746865207a60448201526a65726f206164647265737360a81b6064820152fd5b8280fd5b919050346101b55760203660031901126101b5578135916101e460018060a01b03855416331461071c565b6005831161021c5791602091817fff3dd5e80294197918c284bbfc3dadd97d0b40ce92106110946329088f80068a945551908152a180f35b6020606492519162461bcd60e51b8352820152602060248201527f4d6178205472616e73616374696f6e2063616e6e6f74206578636565642035256044820152fd5b50503461010657806003193601126101065760209061028861027e6106b3565b6024359033610869565b5160018152f35b919050346101b557826003193601126101b55780519183600354906001908260011c9260018116801561038a575b6020958686108214610377575084885290811561035557506001146102fc575b6102f886866102ee828b03836106e4565b519182918261066a565b0390f35b929550600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061034257505050826102f8946102ee9282010194386102dd565b8054868501880152928601928101610325565b60ff191687860152505050151560051b83010192506102ee826102f8386102dd565b634e487b7160e01b845260229052602483fd5b93607f16936102bd565b505034610106578160031936011261010657905490516001600160a01b039091168152602090f35b9050346101b557826003193601126101b55760209250549051908152f35b83346104365780600319360112610436578054816001600160a01b03821661040333821461071c565b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a36001600160a01b031916815580f35b80fd5b5050346101065760203660031901126101065760209181906001600160a01b036104616106b3565b1681526005845220549051908152f35b5050346101065781600319360112610106576020905160128152f35b828434610436576060366003190112610436576104a86106b3565b906104b16106ce565b6104bf604435809285610869565b6001600160a01b038316825260066020908152848320338452905283822054845192606084019067ffffffffffffffff82118583101761054f5760208761028888610547898989898752602883527f45524332303a207472616e7366657220616d6f756e742065786365656473206188840152676c6c6f77616e636560c01b87840152610b43565b903390610767565b634e487b7160e01b815260418852602490fd5b5050346101065781600319360112610106576020906001549051908152f35b5050346101065780600319360112610106576020906102886105a16106b3565b6024359033610767565b92915034610666578360031936011261066657600254600181811c918690828116801561065c575b602095868610821461037757508488529081156103555750600114610603576102f886866102ee828b03836106e4565b929550600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b82841061064957505050826102f8946102ee9282010194386102dd565b805486850188015292860192810161062c565b93607f16936105d3565b8380fd5b6020808252825181830181905290939260005b82811061069f57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161067d565b600435906001600160a01b03821682036106c957565b600080fd5b602435906001600160a01b03821682036106c957565b90601f8019910116810190811067ffffffffffffffff82111761070657604052565b634e487b7160e01b600052604160045260246000fd5b1561072357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b0390811691821561081857169182156107c85760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260068252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9192916001600160a01b03908116918215610af05716908115610a9f578315610a4857600480549460015495868102968188041490151715610a33576000958387526020926007845260409160ff838a205416156109e2575b50848852600584528188205482519083820182811067ffffffffffffffff8211176109cf5761091e929186918652601e83527f536166654d6174683a207375627472616374696f6e206f766572666c6f77000088840152610b43565b85895260058552828920558588528188205490838201918281116109bc57821061097957508188877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9798999a5260058652205551908152a3565b825162461bcd60e51b8152908101859052601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606490fd5b634e487b7160e01b8a526011825260248afd5b634e487b7160e01b8b526041845260248bfd5b6064900483116109f257386108c2565b83606492519162461bcd60e51b8352820152601760248201527f4578636565647320746865204d61785478416d6f756e740000000000000000006044820152fd5b601182634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b91828211610b6e57508103908111610b585790565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b8152908190610b8a906004830161066a565b0390fdfea264697066735822122029260e2475cb3c27fcc7d1dc5f548b242557e9e99dc306bee18e569a80ffc0a864736f6c63430008180033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    supply: PromiseOrValue<BigNumberish>,
    _maxTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20> {
    return super.deploy(
      name_,
      symbol_,
      supply,
      _maxTx,
      overrides || {}
    ) as Promise<ERC20>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    supply: PromiseOrValue<BigNumberish>,
    _maxTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      supply,
      _maxTx,
      overrides || {}
    );
  }
  override attach(address: string): ERC20 {
    return super.attach(address) as ERC20;
  }
  override connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new utils.Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20;
  }
}
